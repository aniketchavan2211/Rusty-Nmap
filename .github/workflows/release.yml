name: Build & Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Android NDK (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl -L https://dl.google.com/android/repository/android-ndk-r27b-linux.zip -o android-ndk.zip
          unzip android-ndk.zip
          mv android-ndk-r27b $HOME/android-ndk
          rm android-ndk.zip

      - name: Build & Package
        shell: bash
        run: |
          mkdir -p release
          VERSION=${GITHUB_REF_NAME#v}

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
              # Linux x86_64
              cargo build --release --target x86_64-unknown-linux-gnu
              strip target/x86_64-unknown-linux-gnu/release/rusty-nmap
              tar -czf release/rusty-nmap-${VERSION}-linux-x86_64.tar.gz -C target/x86_64-unknown-linux-gnu/release rusty-nmap

              # Android aarch64 (Termux)
              rustup target add aarch64-linux-android
              export ANDROID_NDK_HOME=$HOME/android-ndk
              export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
              export CC_aarch64_linux_android=aarch64-linux-android21-clang
              export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$CC_aarch64_linux_android
              cargo build --release --target aarch64-linux-android
              tar -czf release/rusty-nmap-${VERSION}-android-aarch64.tar.gz -C target/aarch64-linux-android/release rusty-nmap

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              cargo build --release
              powershell Compress-Archive -Path target/release/rusty-nmap.exe -DestinationPath release/rusty-nmap-${VERSION}-windows-x86_64.zip

          else
              # macOS
              cargo build --release
              strip target/release/rusty-nmap || true
              tar -czf release/rusty-nmap-${VERSION}-macos-x86_64.tar.gz -C target/release rusty-nmap
          fi

      - name: Generate SHA256SUMS.txt
        shell: bash
        run: |
          cd release
          rm -f SHA256SUMS.txt
          for f in *; do
              if [[ "$f" == *.zip ]]; then
                  certutil -hashfile "$f" SHA256 | grep -E '^[0-9A-F]' | awk '{print $1 "  " FILENAME}' FILENAME="$f" >> SHA256SUMS.txt
              else
                  shasum -a 256 "$f" >> SHA256SUMS.txt
              fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.os }}
          path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release Draft
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Upload binaries + checksums
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_artifacts/*/*
            release_artifacts/*/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
